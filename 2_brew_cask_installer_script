#! /bin/bash
# Functions as a Homebrew and Homebrew/Cask setup script, as a running binary or app install script and as a running update/upgrade script for all of those

# Ask for the administrator password upfront
sudo -v

# Keep-alive: update existing `sudo` time stamp until this script has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

# because of something silly,  we need full xcode for macvim build - stackoverflow.com/a/15371967/3536094 - return value will be 2 if NOT exist, 0 if exist
xcode-select -p 1>/dev/null; if (( $? == 2 )); then 
 echo "Full XCode (with license accepted) recommended (for eg: macvim install). Exiting until its found (otherwise brew will install command line tools). Go install from the app store"
 exit 1
fi
# now lets silently accept the xcode license in case its a first run - https://stackoverflow.com/questions/58632629/how-to-check-if-xcode-license-needs-to-be-accepted
echo "xcode license may need accepting, silently taking care of that..."
sudo xcodebuild -license accept &>/dev/null

echo "Checking for Homebrew and installing if we don't have it"
if test ! $(which brew); then
  echo "Installing homebrew..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
fi

echo "updating homebrew" && brew update

####################################################
# PINNING - run before upgrading (unused at present)
echo "before we update any packages, we may need some pins, to stop things being updated" # YOU HAVE TO `brew unpin x` once you've pinned....
pins=(
#   node - i use nvm now, not from brew, and that's a long story (nvm authors do not recommend brew)
  rust
  insomnia
)
for pin in "${pins[@]}"; do { echo "don't update $pin" && brew pin "$pin"; } done
####################################################

# A conceptual problem here - we must update ALL brew and casked packages we ever installed en-masse, and later we individually deal with each of them in isolation,
#  there's no real operational problem with this, but it would be nice if the same process dealt with installing and updating the individuals. We see exactly the same
#  issue with chocolatey and doubtless many other package managers. It would be nice also to complain about packages which are installed but aren't in the below lists
echo "upgrading already-installed brew AND CASK formula - hold on to your seats!" && brew upgrade
echo "calling the doctor to fix brew and cask issues" && brew doctor

####################################################
# TAPPING - run before installing (unusued at present)
echo "Tapped taps:"
taps=( # caskroom/cask - I think homebrew taps this by default now, the readme of cask says "To start using Homebrew Cask, you just need Homebrew installed."
  adoptopenjdk/openjdk
  homebrew/cask-fonts
) # there once existed caskroom/games - retro emulators - i was always to busy to investigate it
tap_list=$(brew tap)
echo $tap_list && echo "let's tap any untapped taps..."
for tap in "${taps[@]}"; do { [[ $tap_list != *"$tap"* ]] && brew tap "$tap"; } done
####################################################

echo "" && echo " *** BREW *** " && echo ""

bins=(
        ack
        antigen
        bash-completion #https://github.com/bobthecow/git-flow-completion/wiki/Install-Bash-git-completion
        bat # cat with syntax highlights, git integration, non-printable char printing, auto-paging
        cmake #installed to setup YouCompleteMe vim plugin
        code-minimap #required for the vim plugin wfxr/minimap.vim - there's a hardcoded Plug brew install in my .vimrc also
        ctags #also known as ctags-exuberant, don't install as that as it will call itself ctags in the installed list and therefore always install
        duti #for script 7 which sets mac filetype defaults see https://superuser.com/questions/273756/how-to-change-default-app-for-all-files-of-particular-file-type-through-terminal
        opensearch #a community-driven, open source search and analytics suite derived from Elasticsearch 7.10.2 & Kibana 7.10.2
        fswatch #for smoke's nodemon problem
        graphviz
        git
        git-lfs #https://git-lfs.github.com/ - need to run `git lfs install` to set this up for your user after install
	      git-gui # just to get gitk and git-gui back
        gh #github-cli installed for whole org pull originally - https://cli.github.com/manual/gh
        go #ycm said it needed it
        gnupg # originally installed as gpg but when installed calls itself gnupg, and we don't want to try and reinstall every time
        groovy
        httpie #CLI HTTP client; user-friendly cURL replacement featuring intuitive UI, JSON support, syntax highlighting, wget-like downloads, extensions, etc. http://httpie.org
        hub
        jq
        mas #app-store downloader - see https://github.com/mas-cli/mas
        #macvim #use the cask instead due to compilation issues on catalina e.g.: https://github.com/macvim-dev/macvim/issues/952 # --with-override-system-vim" #https://stackoverflow.com/a/8539518/3536094 one reason i'm using macvim is clientserver support, another is some completion? quoting this doesn't help it install https://github.com/Homebrew/homebrew-core/issues/26583
        mono # ycm said it needed it
        #mysql - using mamp's copy as my primary for the meanwhile
        neovim
        node #tern requires a globally installed node, so better to give it a later one than none at all
        p7zip
        postgresql
        pygments # syntax highlighter used by the zsh plugin: https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/colorize
        redis
        rustup-init # Rust version manager (pseudonym is just rustup both work), manually run rustup-init after installation to install Rust and Cargo https://sourabhbajaj.com/mac-setup/Rust/
        #python #ycm needs it - but  do it properly: https://akrabat.com/creating-virtual-environments-with-pyenv/ and https://opensource.com/article/19/5/python-3-default-mac#what-to-do
        readline #pyenv says it needs it, but brew had installed it anyway..
        xz #pyenv says it needs it, but brew had installed it anyway..
        pyenv
        pyenv-virtualenv
        tidy-html5
        tmate
        tmux
        trash # new rmtrash, I also manually ln -s /usr/local/bin/trash /usr/local/bin/rmtrash in case I forget
        tree
        reattach-to-user-namespace #required for pbcopy in tmux, your tmux.conf WILL crash without it
        #vim --with-client-server # see https://stackoverflow.com/a/25979565/3536094 would also require adding xquartz to cask (yes cask!)
        wget
        zsh
        zsh-completions
        zsh-syntax-highlighting
)

# previously i had compared the string list 'brew list' with the above array, this was flawed as matches were substring matches not item matches
# (used to be #for bin in "${bins[@]}"; do { [[ $brew_list != *"$bin"* ]] && echo "installing $bin" && brew install "$bin"; } done

brew_installed=($(brew list --formula)) # note the lack of " " - that's how we space separate the list into an array
brew_installed_from_list=()

echo "BREW: ALREADY INSTALLED BINARIES: ${brew_installed[@]}" && echo "let's brew any unbrewed bins..." && echo ""

for bin in "${bins[@]}"; do { 
  for installed in "${brew_installed[@]}"; do {
    [[ "$bin" == "$installed" ]] && brew_installed_from_list+=( "$bin" )
  } done
} done

echo "BREW: ALREADY INSTALLED FROM YOUR LIST: ${brew_installed_from_list[@]}" && echo ""
need_to_install=( $(printf "%s\n" "${bins[@]}" "${brew_installed_from_list[@]}" | sort | uniq -u) ) #https://stackoverflow.com/a/57185256/3536094 
echo "BREW: IN YOUR LIST BUT NOT INSTALLED (at the list name anyway!): ${need_to_install[@]}" && echo ""
for to_install in "${need_to_install[@]}"; do { echo "BREW: INSTALLING $to_install" && brew install "$to_install"; } done

echo "" && echo " *** CASK *** " && echo ""

# CASK - From https://github.com/Homebrew/homebrew-cask/blob/master/USAGE.md
# > Homebrew automatically taps and keeps Homebrew Cask updated. brew update is all that is required.
# > Since the Homebrew Cask repository is a Homebrew Tap, youâ€™ll pull down the latest Casks every time you issue the regular Homebrew command brew update.

apps=(
        aerial # beautiful screensaver
        alfred
        android-file-transfer
        another-redis-desktop-manager
        appcleaner
        balsamiq-wireframes
        betterzip # for the betterzip quick look plugin that shows zip contents in finder
        blueharvest
        caffeine
        cord # favour microsoft remote desktop, but that needs appstore
        cyberduck # coz, believe it or not, filezilla is malware...
        # dash, dash 5 is a paid upgrade, need to stick to dash 4, see previous versions section below
        db-browser-for-sqlite #https://sqlitebrowser.org/
        diffmerge
        discord
        disk-inventory-x
        docker
        dropbox
        electron-fiddle
        firefox
        flux
        font-inconsolata-nerd-font #use inconsolata nerd font mono in iterm for best lvim experience
        # freefilesync - not stable enough to brew  cask atm see https://github.com/Homebrew/homebrew-cask/pull/78560
        gitup
        google-drive
        google-chrome
        insomnia #but pinned! https://github.com/Kong/insomnia/issues/6585#issuecomment-1738784498, turn off auto-updates in prefs (scroll down)
        iterm2
        adoptopenjdk8 #note NOT java, for Flex. needs tap
        jd-gui #inspect java class files
        jumpcut
        macvim
        mamp
        microsoft-teams
        moom
        paintbrush
        #parallels - you're using a different version per machine
        pgadmin4
        paintbrush
        platypus
        postman
        regexhibit # regex tester using perl
        # rocket-chat v3 does not like url, need to pin at 2.7.1, see previous versions section below
        skype
        slack
        sourcetree
        spotify
        sublime-text
        teamviewer
        the-unarchiver
        tiddly
        tunnelblick
        #vagrant - leave this to flex-services script
        #virtualbox # needs extension allowing in maccos security prefs so will fail first time whilst you manually allow it in prefs # needs v5 due to flex-services - either its installer will do that or download this https://download.virtualbox.org/virtualbox/5.2.44/VirtualBox-5.2.44-139111-OSX.dmg 
        #virtualbox-extension-pack - previous versions can be found https://download.virtualbox.org/virtualbox/
        visual-studio-code
        vnc-viewer
        webtorrent
        whatsapp
)

# note here we can just brew install (without the --cask), that was the whole point of the homebrew maintainers merging brew and cask
#   commands in 2020, but there were and still are at the time of writing conflicting namespaces: above you don't see docker the brew
#   (the docker binary) but you do see docker the cask (which is  docker-desktop). This may be my only example, however.
#   Providing the --cask argument disambiguates, but we could just provide that as part of the docker invocation in the loop. So 
#   is it still useful / clearer to maintain the distinction between a brew list and a cask list, or should they be merged?
install="brew install --cask"
cask_installed=($(brew list --cask)) # note the lack of " " - that's how we space separate the list into an array
cask_installed_from_list=()

echo "CASK: ALREADY INSTALLED: ${cask_installed[@]}" && echo "let's install any uninstalled casks..." && echo "" 
# old was: for app in "${apps[@]}"; do { [[ $cask_list != *"$app"* ]] && $install "$app"; } done

for app in "${apps[@]}"; do { 
  for installed in "${cask_installed[@]}"; do {
    [[ "$app" == "$installed" ]] && cask_installed_from_list+=( "$app" )
  } done
} done

echo "CASK: ALREADY INSTALLED FROM YOUR LIST: ${cask_installed_from_list[@]}" && echo ""
cask_need_to_install=( $(printf "%s\n" "${apps[@]}" "${cask_installed_from_list[@]}" | sort | uniq -u) ) #https://stackoverflow.com/a/57185256/3536094 

echo "CASK: IN YOUR LIST BUT NOT INSTALLED (at the list name anyway!): ${cask_need_to_install[@]}" & echo ""

for to_install in "${cask_need_to_install[@]}"; do { echo "CASK: INSTALLING $to_install" && $install "$to_install"; } done

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
# PREVIOUS VERSIONS OF CASKS 
# pre-2020 you could https://stackoverflow.com/a/58373705 (and currently dash example below) or https://www.jverdeyen.be/mac/downgrade-brew-cask-application/ 
# for perhaps the quickest method. the method for finding the url is still sound, but you can no longer download from an arbitrary
# url. Instead the best workaround (having failed with brew extract - this did NOT work https://cmichel.io/how-to-install-an-old-package-version-with-brew/)
# appears to be to save the formula locally https://dev.to/gjrdiesel/getting-around-brew-s-error-calling-non-checksummed-download-of-17fl
# but more specifically https://github.com/jhen0409/react-native-debugger/issues/567#issuecomment-759419612
# this literally seems the ONLY way to do this currently: one of the biggest failiures of macos for dev?
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 

echo "Installing CASKS which require previous versions"

curl -L  https://raw.githubusercontent.com/caskroom/homebrew-cask/baf4f35e70c225fe1a8a60ec3b4e22604187238d/Casks/dash.rb > dash.rb && brew install dash.rb --cask && rm dash.rb

curl -L  https://raw.githubusercontent.com/Homebrew/homebrew-cask/f6ae619db3ca758c1b7297e6fce9b372a3b90fff/Casks/rocket-chat.rb > rocket-chat.rb && brew install rocket-chat.rb --cask && rm rocket-chat.rb

curl -L  https://raw.githubusercontent.com/Homebrew/homebrew-cask/a649350f567a4ade1b6ee7509d798d6b1ab3a4fb/Casks/i/insomnia.rb > insomnia.rb && brew install insomnia.rb --cask && rm insomnia.rb

echo "running brew and cask cleanup" && brew cleanup

# TODO: brew update will update any brews and casks which were previously installed, regardless of whether you removed or commented them here. If we had a good reason to supplant a brew/cask with a manual install, brew will just replace it again. So an uninstall section here

# install the extension for github-cli that allows us to clone/update an orgs repos, this won't work without first having issued `gh auth login` but it'll warn about that
echo "Installing gh-clone-org extension for github-cli"
gh extension install matt-bartel/gh-clone-org

echo "Im outta yer loop, cya"
 
