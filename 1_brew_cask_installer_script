#! /bin/bash
# Functions as a Homebrew and Homebrew/Cask setup script, as a running binary or app install script and as a running update/upgrade script for all of those

# Ask for the administrator password upfront
sudo -v

# Keep-alive: update existing `sudo` time stamp until this script has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

# because of something silly,  we need full xcode for macvim build - stackoverflow.com/a/15371967/3536094 - return value will be 2 if NOT exist, 0 if exist
xcode-select -p 1>/dev/null; if (( $? == 2 )); then 
 echo "Full XCode (with license accepted) recommended (for eg: macvim install). Exiting until its found (otherwise brew will install command line tools). Go install from the app store"
 exit 1
fi
# now lets silently accept the xcode license in case its a first run - https://stackoverflow.com/questions/58632629/how-to-check-if-xcode-license-needs-to-be-accepted
echo "xcode license may need accepting, silently taking care of that..."
sudo xcodebuild -license accept &>/dev/null

echo "Checking for Homebrew and installing if we don't have it"
if test ! $(which brew); then
  echo "Installing homebrew..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
fi

echo "updating homebrew" && brew update

####################################################
# PINNING - run before upgrading (unused at present)
echo "before we update any packages, we may need some pins, to stop things being updated" # YOU HAVE TO `brew unpin x` once you've pinned....
pins=(
#   node - i use nvm now, not from brew, and that's a long story (nvm authors do not recommend brew)
)
for pin in "${pins[@]}"; do { echo "don't update $pin" && brew pin "$pin"; } done
####################################################

echo "upgrading already-installed brew AND CASK formula - hold on to your seats!" && brew upgrade
echo "calling the doctor to fix brew and cask issues" && brew doctor

####################################################
# TAPPING - run before installing (unusued at present)
echo "Tapped taps:"
taps=( # caskroom/cask - I think homebrew taps this by default now, the readme of cask says "To start using Homebrew Cask, you just need Homebrew installed."
  adoptopenjdk/openjdk
) # there once existed caskroom/games - retro emulators - i was always to busy to investigate it
tap_list=$(brew tap)
echo $tap_list && echo "let's tap any untapped taps..."
for tap in "${taps[@]}"; do { [[ $tap_list != *"$tap"* ]] && brew tap "$tap"; } done
####################################################

echo "" && echo " *** BREW *** " && echo ""

bins=(
        ack
        antigen
        bash-completion #https://github.com/bobthecow/git-flow-completion/wiki/Install-Bash-git-completion
        cmake #installed to setup YouCompleteMe vim plugin
        ctags #also known as ctags-exuberant, don't install as that as it will call itself ctags in the installed list and therefore always install
        fswatch #for smoke's nodemon problem
        graphviz
        git
	git-gui # just to get gitk and git-gui back
        go #ycm said it needed it
        gnupg # originally installed as gpg but when installed calls itself gnupg, and we don't want to try and reinstall every time
        groovy
        httpie #CLI HTTP client; user-friendly cURL replacement featuring intuitive UI, JSON support, syntax highlighting, wget-like downloads, extensions, etc. http://httpie.org
        hub
        jq
        mas #app-store downloader - see https://github.com/mas-cli/mas
        macvim # --with-override-system-vim" #https://stackoverflow.com/a/8539518/3536094 one reason i'm using macvim is clientserver support, another is some completion? quoting this doesn't help it install https://github.com/Homebrew/homebrew-core/issues/26583
        mono # ycm said it needed it
        #mysql - using mamp's copy as my primary for the meanwhile
        node #tern requires a globally installed node, so better to give it a later one than none at all
        p7zip
        postgresql
        pygments # syntax highlighter used by the zsh plugin: https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/colorize
        python #ycm needs it - you might prefer to do it properly in future: https://opensource.com/article/19/5/python-3-default-mac#what-to-do
        rmtrash
        tidy-html5
        tmate
        tmux
        tree
        reattach-to-user-namespace #required for pbcopy in tmux, your tmux.conf WILL crash without it
        #vim --with-client-server # see https://stackoverflow.com/a/25979565/3536094 would also require adding xquartz to cask (yes cask!)
        wget
        zsh
        zsh-completions
        zsh-syntax-highlighting
)

# previously i had compared the string list 'brew list' with the above array, this was flawed as matches were substring matches not item matches
# (used to be #for bin in "${bins[@]}"; do { [[ $brew_list != *"$bin"* ]] && echo "installing $bin" && brew install "$bin"; } done

brew_installed=($(brew list)) # note the lack of " " - that's how we space separate the list into an array
brew_installed_from_list=()

echo "BREW: ALREADY INSTALLED BINARIES: ${brew_installed[@]}" && echo "let's brew any unbrewed bins..." && echo ""

for bin in "${bins[@]}"; do { 
  for installed in "${brew_installed[@]}"; do {
    [[ "$bin" == "$installed" ]] && brew_installed_from_list+=( "$bin" )
  } done
} done

echo "BREW: ALREADY INSTALLED FROM YOUR LIST: ${brew_installed_from_list[@]}" && echo ""
need_to_install=( $(printf "%s\n" "${bins[@]}" "${brew_installed_from_list[@]}" | sort | uniq -u) ) #https://stackoverflow.com/a/57185256/3536094 
echo "BREW: IN YOUR LIST BUT NOT INSTALLED (at the list name anyway!): ${need_to_install[@]}" && echo ""
for to_install in "${need_to_install[@]}"; do { echo "BREW: INSTALLING $to_install" && brew install "$to_install"; } done

echo "" && echo " *** CASK *** " && echo ""

# CASK - From https://github.com/Homebrew/homebrew-cask/blob/master/USAGE.md
# > Homebrew automatically taps and keeps Homebrew Cask updated. brew update is all that is required.
# > Since the Homebrew Cask repository is a Homebrew Tap, youâ€™ll pull down the latest Casks every time you issue the regular Homebrew command brew update.

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
# FOR HOW TO DOWNLOAD PREVIOUS VERSIONS OF CASKS see https://stackoverflow.com/a/58373705 (and currently dash example below)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 

apps=(
        aerial # beautiful screensaver
        alfred
        another-redis-desktop-manager
        appcleaner
        balsamiq-wireframes
        betterzip # for the betterzip quick look plugin that shows zip contents in finder
        blueharvest
        boostnote
        caffeine
        cord # favour microsoft remote desktop, but that needs appstore
        cyberduck # coz, believe it or not, filezilla is malware...
        # dash, dash 5 is a paid upgrade, need to stick to dash 4:
        https://raw.githubusercontent.com/caskroom/homebrew-cask/baf4f35e70c225fe1a8a60ec3b4e22604187238d/Casks/dash.rb
        diffmerge
        disk-inventory-x
        dropbox
        firefox
        flux
        # freefilesync - not stable enough to brew  cask atm see https://github.com/Homebrew/homebrew-cask/pull/78560
        gitup
        google-backup-and-sync
        google-chrome
        insomnia
        iterm2
        adoptopenjdk8 #note NOT java, for Flex. needs tap
        jd-gui #inspect java class files
        jumpcut
        mamp
        moom
        paintbrush
        #parallels - you're using a different version per machine
        pgadmin4
        paintbrush
        platypus
        postman
        regexhibit # regex tester using perl
        rocket-chat #doesn't work needs to be updated from v1.3 to 2.7
        skype
        slack
        sourcetree
        spotify
        sublime-text
        teamviewer
        the-unarchiver
        tiddly
        tunnelblick
        vagrant
        virtualbox # needs extension allowing in maccos security prefs so will fail first time whilst you manually allow it in prefs
        virtualbox-extension-pack
        visual-studio-code
	xquartz # required by wine-stable hence before it in the list
        wine-stable
)

cask="brew cask"
install="$cask install"
cask_installed=($(brew cask list)) # note the lack of " " - that's how we space separate the list into an array
cask_installed_from_list=()

echo "CASK: ALREADY INSTALLED: ${cask_installed[@]}" && echo "let's install any uninstalled casks..." && echo "" 
# old was: for app in "${apps[@]}"; do { [[ $cask_list != *"$app"* ]] && $install "$app"; } done

for app in "${apps[@]}"; do { 
  for installed in "${cask_installed[@]}"; do {
    [[ "$app" == "$installed" ]] && cask_installed_from_list+=( "$app" )
  } done
} done

echo "CASK: ALREADY INSTALLED FROM YOUR LIST: ${cask_installed_from_list[@]}" && echo ""
cask_need_to_install=( $(printf "%s\n" "${apps[@]}" "${cask_installed_from_list[@]}" | sort | uniq -u) ) #https://stackoverflow.com/a/57185256/3536094 

echo "CASK: IN YOUR LIST BUT NOT INSTALLED (at the list name anyway!): ${cask_need_to_install[@]}" & echo ""

for to_install in "${cask_need_to_install[@]}"; do { echo "CASK: INSTALLING $to_install" && $install "$to_install"; } done

echo "running brew and cask cleanup" && brew cleanup

echo "Im outta yer loop, cya"
 
