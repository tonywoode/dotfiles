#!/bin/bash

# when run, will take any non-excluded dotfiles in this directory and check them against ~. If there's no valid symlink in ~ to a dotfile in this repo, it will make one. If ~ has a real file named the same as the dotfile in here, it will move it to 'olddir' before symlinking

# what it can't do is remove any symlinks in ~ that are no longer needed/invalid, you'll have to do that by hand.


dir=~/CODE/Scripts/Dotfiles/dotfiles # dotfiles directory
olddir=~/CODE/Scripts/Dotfiles/dotfiles_old # old dotfiles backup directory

if [[ ! -d "$olddir" ]]; then echo "making directory to house old dots, one level up from this script" && mkdir -p "$olddir"; fi

# make sure we're in the dotfiles directory, prob not needed
echo "Changing to the $dir directory"
cd "$dir"

# create an array with all the dotfiles in my dots dir
# [^.] is a negating expression to avoid matching . or ..  https://stackoverflow.com/a/31498096/3536094
arr=($dir/.[^.]*)

# some of below from https://koenwoortman.com/bash-script-check-if-file-is-symlink/, the multiple ifs because zsh doesn't seem to like any exclusion list-based array comparisons, and other solutions get too bsd vs gnu 
for dotfilepath in "${arr[@]}"; do
   dotfile="${dotfilepath##*/}" #filename only
   if [[ "$dotfile" = ".git" ]] ||  
      [[ "$dotfile" = ".config" ]] || # its a folder anywhay but is the XDG folder, and we'll deal with neovim in it separetly later
      [[ "$dotfile" = ".gitignore" ]] ||
      [[ "$dotfile" = *.swp ]] || # In case we have vim open on this file...
      [[ "$dotfile" = ".vim" ]] # I swear we don't need that solarized colourscheme its installed by a package, if we do then curl it in instead
   then echo "$dotfile is excluded"
   elif [[ -f "$HOME/$dotfile" ]] ; then
       #dotfile is already in ~, is it a valid symlink?
       if [[ -L "$HOME/$dotfile" && -e "$HOME/$dotfile" ]]; then
         echo "$dotfile already linked to dots, ignoring..."
       else 
         echo "$dotfile is not a symlink (or is a broken one)"
         # so we need to move then copy
         mv "$HOME/$dotfile" "$olddir/"
         ln -s "$dotfilepath" "$HOME/$dotfile"
     fi 
   else echo "$dotfile doesn't exist in ~, linking..." && ln -s "$dotfilepath" "$HOME/$dotfile"
   fi 
done

echo "remember you may need to source/reload some dotfiles before anything will change..."  

