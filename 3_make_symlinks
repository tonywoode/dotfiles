#!/bin/bash

# when run, will take any non-excluded dotfiles in this directory and check them against ~. If there's no valid symlink in ~ to a dotfile in this repo, it will make one. If ~ has a real file named the same as the dotfile in here, it will move it to 'olddir' before symlinking

# what it can't do is remove any symlinks in ~ that are no longer needed/invalid, you'll have to do that by hand.


dir=~/CODE/Scripts/Dotfiles/dotfiles # dotfiles directory
olddir=~/CODE/Scripts/Dotfiles/dotfiles_old # old dotfiles backup directory

if [[ ! -d "$olddir" ]]; then echo "making directory to house old dots, one level up from this script" && mkdir -p "$olddir"; fi

# make sure we're in the dotfiles directory, prob not needed
echo "Changing to the $dir directory"
cd "$dir"

# create an array with all the dotfiles in my dots dir
# [^.] is a negating expression to avoid matching . or ..  https://stackoverflow.com/a/31498096/3536094
arr=($dir/.[^.]*)

# some of below from https://koenwoortman.com/bash-script-check-if-file-is-symlink/, the multiple ifs because zsh doesn't seem to like any exclusion list-based array comparisons, and other solutions get too bsd vs gnu 
for dotfilepath in "${arr[@]}"; do
   dotfile="${dotfilepath##*/}" #filename only
   if [[ "$dotfile" = ".git" ]] ||  
      [[ "$dotfile" = ".config" ]] || # its a folder anywhay but is the XDG folder, and we'll deal with neovim in it separetly later
      [[ "$dotfile" = ".gitignore" ]] ||
      [[ "$dotfile" = *.swp ]] || # In case we have vim open on this file...
      [[ "$dotfile" = ".vim" ]] # I swear we don't need that solarized colourscheme its installed by a package, if we do then curl it in instead
      [[ "$dotfile" = ".vscode" ]] # that got me: its fine at first....until you open this repo with vscode and then re-run this! its a folder as well
   then echo "$dotfile is excluded"
   elif [[ -f "$HOME/$dotfile" ]] ; then
       #dotfile is already in ~, is it a valid symlink?
       if [[ -L "$HOME/$dotfile" && -e "$HOME/$dotfile" ]]; then # I see no point in second check?!?!
         echo "$dotfile already linked to dots, ignoring..."
       else 
         echo "$dotfile is not a symlink (or is a broken one)"
         # so we need to move then copy
         mv "$HOME/$dotfile" "$olddir/"
         ln -s "$dotfilepath" "$HOME/$dotfile"
     fi 
   else echo "$dotfile doesn't exist in ~, linking..." && ln -s "$dotfilepath" "$HOME/$dotfile"
   fi 
done

# now do a similar operation for neovim, which uses the XDG standard ie: ~/.config/nvim/*
#   symlink the whole nvim folder (note this may not be a wise idea for other programs that use
#   the standard, for their config may contain secrets)

# macos doesn't do XDG_CONFIG_HOME, so in case there's no XDG_CONFIG_HOME yet
should_be_xdg_config_home=$HOME/.config

# first neovim...link the folder in this repo tothe ~/.config/nvim dir
nvim_config_dir=$should_be_xdg_config_home/nvim
my_dots_nvim_config_dir=$dir/.config/nvim

if [[ ! -d $should_be_xdg_config_home ]] ; then
    echo "Wanted to symlink your neovim folder from dots, but there's no ~/.config, making one..."
    mkdir -p $should_be_xdg_config_home
fi

if [[ -d "$nvim_config_dir" ]] ; then
    #dotfile is already in ~, is it a valid symlink?
    if [[ -L "$nvim_config_dir" ]]; then
        echo "$nvim_config_dir already linked to dots, ignoring..."
    else 
        echo "$nvim_config_dir is not a symlink (or is a broken one), its prob a real file, replace it..."
        # so we need to move then copy
        # first check if we have a .config dir in our backup folder already
        [[ -d "$olddir/.config" ]] || (echo "making a .config folder in $olddir to backup neovim config folder"; mkdir "$olddir/.config")
        echo "moving $nvim_config_dir to $olddir/.config"
        mv "$nvim_config_dir" "$olddir/.config"
        echo "linking $my_dots_nvim_config_dir to $nvim_config_dir"
        ln -s "$my_dots_nvim_config_dir" "$nvim_config_dir"
    fi 
else echo "$nvim_config_dir doesn't exist in ~, linking..." && ln -s "$my_dots_nvim_config_dir" "$nvim_config_dir"
fi

# that same loop again but for lvim
lvim_config_dir=$should_be_xdg_config_home/lvim
my_dots_lvim_config_dir=$dir/.config/lvim
if [[ ! -d $should_be_xdg_config_home ]] ; then
    echo "Wanted to symlink your neovim folder from dots, but there's no ~/.config, making one..."
    mkdir -p $should_be_xdg_config_home
fi

if [[ -d "$lvim_config_dir" ]] ; then
    #dotfile is already in ~, is it a valid symlink?
    if [[ -L "$lvim_config_dir" ]]; then
        echo "$lvim_config_dir already linked to dots, ignoring..."
    else 
        echo "$lvim_config_dir is not a symlink (or is a broken one), its prob a real file, replace it..."
        # so we need to move then copy
        # first check if we have a .config dir in our backup folder already
        [[ -d "$olddir/.config" ]] || (echo "making a .config folder in $olddir to backup neovim config folder"; mkdir "$olddir/.config")
        echo "moving $lvim_config_dir to $olddir/.config"
        mv "$lvim_config_dir" "$olddir/.config"
        echo "linking $my_dots_lvim_config_dir to $lvim_config_dir"
        ln -s "$my_dots_lvim_config_dir" "$lvim_config_dir"
    fi 
else echo "$lvim_config_dir doesn't exist in ~, linking..." && ln -s "$my_dots_lvim_config_dir" "$lvim_config_dir"
fi


# general message to end
echo "remember you may need to source/reload some dotfiles before anything will change..."  

