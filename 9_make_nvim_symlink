#!/bin/bash

# now do a similar operation for neovim, which uses the XDG standard ie: ~/.config/nvim/*
#   symlink the whole nvim folder (note this may not be a wise idea for other programs that use
#   the standard, for their config may contain secrets)

olddir=~/CODE/Scripts/Dotfiles/dotfiles_old # old dotfiles backup directory

# macos doesn't do XDG_CONFIG_HOME, so in case there's no XDG_CONFIG_HOME yet
should_be_xdg_config_home=$HOME/.config
if [[ ! -d $should_be_xdg_config_home ]] ; then
    echo "Wanted to symlink your neovim folder from dots, but there's no ~/.config, making one..."
    mkdir -p $should_be_xdg_config_home
fi

nvim_config_dir=$should_be_xdg_config_home/nvim
my_dots_nvim_config_dir=~/CODE/Scripts/Dotfiles/dotfiles/.config/nvim

if [[ -d "$nvim_config_dir" ]] ; then
    #dotfile is already in ~, is it a valid symlink?
    if [[ -L "$nvim_config_dir" ]]; then
        echo "$nvim_config_dir already linked to dots, ignoring..."
    else 
        echo "$nvim_config_dir is not a symlink (or is a broken one), its prob a real file, replace it..."
        # so we need to move then copy
        # first check if we have a .config dir in our backup folder already
        [[ -d "$olddir/.config" ]] || (echo "making a .config folder in $olddir to backup neovim config folder"; mkdir "$olddir/.config")
        echo "moving $nvim_config_dir to $olddir/.config"
        mv "$nvim_config_dir" "$olddir/.config"
        echo "linking $my_dots_nvim_config_dir to $nvim_config_dir"
        ln -s "$my_dots_nvim_config_dir" "$nvim_config_dir"
    fi 
else echo "$nvim_config_dir doesn't exist in ~, linking..." && ln -s "$my_dots_nvim_config_dir" "$nvim_config_dir"
fi
